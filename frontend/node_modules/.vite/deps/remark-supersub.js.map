{
  "version": 3,
  "sources": ["../../remark-supersub/lib/index.js"],
  "sourcesContent": ["/**\r\n * Subscript and Superscript plugin for Remark.\r\n */\r\nimport { visit } from 'unist-util-visit';\r\nexport default function supersub() {\r\n    // Superscript\r\n    return (tree) => {\r\n        visit(tree, ['text'], (node, i, parent) => {\r\n            if (node.type !== 'text') {\r\n                return;\r\n            }\r\n            const { value } = node;\r\n            const values = value.split(/\\^/);\r\n            if (values.length === 1 || values.length % 2 === 0) {\r\n                return;\r\n            }\r\n            const children = values.map((str, i) => i % 2 === 0\r\n                ? {\r\n                    type: 'text',\r\n                    value: str\r\n                }\r\n                : {\r\n                    type: 'superscript',\r\n                    data: {\r\n                        hName: 'sup'\r\n                    },\r\n                    children: [\r\n                        {\r\n                            type: 'text',\r\n                            value: str\r\n                        }\r\n                    ]\r\n                });\r\n            parent.children.splice(i, 1, ...children);\r\n        });\r\n        // Subscript\r\n        visit(tree, ['text'], (node, i, parent) => {\r\n            if (node.type !== 'text') {\r\n                return;\r\n            }\r\n            const { value } = node;\r\n            // eslint-disable-next-line no-useless-escape\r\n            const values = value.split(/\\~/);\r\n            if (values.length === 1 || values.length % 2 === 0) {\r\n                return;\r\n            }\r\n            const children = values.map((str, i) => i % 2 === 0\r\n                ? {\r\n                    type: 'text',\r\n                    value: str\r\n                }\r\n                : {\r\n                    type: 'subscript',\r\n                    data: {\r\n                        hName: 'sub'\r\n                    },\r\n                    children: [\r\n                        {\r\n                            type: 'text',\r\n                            value: str\r\n                        }\r\n                    ]\r\n                });\r\n            parent.children.splice(i, 1, ...children);\r\n        });\r\n    };\r\n}\r\n"],
  "mappings": ";;;;;;;AAIe,SAAR,WAA4B;AAE/B,SAAO,CAAC,SAAS;AACb,UAAM,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,WAAW;AACvC,UAAI,KAAK,SAAS,QAAQ;AACtB;AAAA,MACJ;AACA,YAAM,EAAE,MAAM,IAAI;AAClB,YAAM,SAAS,MAAM,MAAM,IAAI;AAC/B,UAAI,OAAO,WAAW,KAAK,OAAO,SAAS,MAAM,GAAG;AAChD;AAAA,MACJ;AACA,YAAM,WAAW,OAAO,IAAI,CAAC,KAAKA,OAAMA,KAAI,MAAM,IAC5C;AAAA,QACE,MAAM;AAAA,QACN,OAAO;AAAA,MACX,IACE;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,UACF,OAAO;AAAA,QACX;AAAA,QACA,UAAU;AAAA,UACN;AAAA,YACI,MAAM;AAAA,YACN,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ,CAAC;AACL,aAAO,SAAS,OAAO,GAAG,GAAG,GAAG,QAAQ;AAAA,IAC5C,CAAC;AAED,UAAM,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,WAAW;AACvC,UAAI,KAAK,SAAS,QAAQ;AACtB;AAAA,MACJ;AACA,YAAM,EAAE,MAAM,IAAI;AAElB,YAAM,SAAS,MAAM,MAAM,IAAI;AAC/B,UAAI,OAAO,WAAW,KAAK,OAAO,SAAS,MAAM,GAAG;AAChD;AAAA,MACJ;AACA,YAAM,WAAW,OAAO,IAAI,CAAC,KAAKA,OAAMA,KAAI,MAAM,IAC5C;AAAA,QACE,MAAM;AAAA,QACN,OAAO;AAAA,MACX,IACE;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,UACF,OAAO;AAAA,QACX;AAAA,QACA,UAAU;AAAA,UACN;AAAA,YACI,MAAM;AAAA,YACN,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ,CAAC;AACL,aAAO,SAAS,OAAO,GAAG,GAAG,GAAG,QAAQ;AAAA,IAC5C,CAAC;AAAA,EACL;AACJ;",
  "names": ["i"]
}
